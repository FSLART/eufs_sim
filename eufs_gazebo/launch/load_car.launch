<?xml version="1.0"?>
<launch>

  <!-- roslaunch arguments -->
  <arg name="namespace" default=""/>
  <arg name="cmd_timeout" default="0.5"/>
  <arg name="publish_gt_tf" default="false"/>

  <!-- Vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.3"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- Control Method Argument -->
  <arg name="controlMethod" default="speed"/>
  <arg name="show_rqt_gui" default="true"/>
  <arg name="launch_group" default="default" />

<!--  <param name="robot_description"-->
<!--         command="$(find xacro)/xacro &#45;&#45;inorder '$(find eufs_description)/robots/ads-dv.urdf.xacro'-->
<!--                                                publish_tf:=$(arg publish_gt_tf)-->
<!--                                                simulate_perception:=true"/>-->

  <arg name="robot_name" default="gotthard"/>
  <param name="tf_prefix" value="/fssim/vehicle"/>

  <arg name="sensors_config_file" default="$(find eufs_description)/cars/$(arg robot_name)/config/sensors.yaml"/>
  <arg name="car_config_file"     default="$(find eufs_description)/cars/$(arg robot_name)/config/car.yaml"/>
  <arg name="car_dimensions_file" default="$(find eufs_description)/cars/$(arg robot_name)/config/distances.yaml"/>

  <param name="robot_description"
         command="$(find xacro)/xacro --inorder '$(find eufs_description)/urdf/vehicle/car.xacro'
                                                robot_name:='$(arg robot_name)'
                                                sensors_config_file:='$(arg sensors_config_file)'
                                                car_config_file:='$(arg car_config_file)'
                                                car_dimensions_file:='$(arg car_dimensions_file)'" />

  <!-- once the joint_state is published, run the robot_state_publisher, the namespace has to be adapted -->
  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    <remap from="/joint_states" to="/eufs/joint_states" />
  </node>

  <group if="$(eval arg('show_rqt_gui'))">
    <!-- start rqt robot steering module -->
    <node name="eufs_sim_rqt" pkg="rqt_gui" type="rqt_gui" respawn="false" output="screen" args="--perspective-file $(find eufs_gazebo)/config/eufs_sim.perspective"/>

    <!--start twist to ackermannDrive converter for robot steering plugin -->
    <node pkg="ros_can_sim" name="twist_to_ackermannDrive" type="twist_to_ackermannDrive.py" args="twistToAckermannDrive:=eufsa_control/teleop_vel_out"/>
  </group>

  <node name="spawn_platform" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg namespace)
              -gazebo_namespace /gazebo
              -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

  <!-- load joint controllers -->
  <!--<node name="controller_spawner" pkg="controller_manager" type="spawner" args="$(find ros_can_sim)/config/joint_controller.yaml"/>-->

</launch>
