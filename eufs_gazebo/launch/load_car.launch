<?xml version="1.0"?>
<launch>

  <!-- Namespace of the gazebo robot  -->
  <arg name="namespace" default="eufs"/>

  <!-- The launch group (default or no_perception) -->
  <arg name="launch_group" default="default"/>

  <!-- Show the RQT GUI (with ros_can_sim GUI and EUFS Robot Steering GUI) -->
  <arg name="show_rqt_gui" default="true"/>
  <!-- Launch RViz -->
  <arg name="rviz" default="false"/>

  <!-- The vehicle model class to use in the gazebo_ros_race_car_model -->
  <arg name="vehicleModel" default="DynamicBicycle"/>
  <!-- If the gazebo_ros_race_car_model should publish the ground truth tf -->
  <arg name="publish_gt_tf" default="false"/>

  <!-- Vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- The name of the robot (must be directory in eufs_description/robots called {robot_name} with robot.urdf.xacro and config.yaml) -->
  <arg name="robot_name" default="eufs"/>
  <arg name="config_file" default="$(find-pkg-share eufs_description)/robots/$(var robot_name)/config.yaml"/>

  <!-- Publish the joint states (required for the wheels) -->
<!--   <node name="joint_state_publisher" pkg="joint_state_publisher" exec="joint_state_publisher"> -->
<!--     <remap from="/joint_states" to="/eufs/joint_states" /> -->
<!--     <param name="rate" value="200" /> -->
<!--   </node> -->

  <!-- Convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher"
        respawn="false" output="screen">
    <remap from="/joint_states" to="/eufs/joint_states" />
    <param name="rate" value="200" />
  </node>

  <param name="robot_description"
         command="$(find xacro)/xacro '$(find-pkg-share eufs_description)/robots/$(car robot_name)/robot.urdf.xacro'
                                       robot_name:='$(arg robot_name)'
                                       vehicle_model:='$(arg vehicleModel)'
                                       config_file:='$(arg config_file)'
                                       publish_tf:=$(arg publish_gt_tf)
                                       simulate_perception:=true"/>  <!-- Should simulate perception if in no_perception launch group -->

  <node name="spawn_platform" pkg="gazebo_ros" exec="spawn_entity.py" args="-entity $(var namespace)
        -x $(var x) -y $(var y) -z $(var z)
        -R $(var roll) -P $(var pitch) -Y $(var yaw)"
        -stdin $(var robot_description)/>



<!--   <group if="$(eval arg('rviz'))"> -->
    <!-- Launch RViz -->
<!--     <node name="rviz" pkg="rviz" type="rviz"/> -->
<!--   </group> -->

<!--   <group if="$(eval arg('show_rqt_gui'))"> -->
    <!-- Start rqt robot steering and ros can sim module -->
<!--     <node name="eufs_sim_rqt" pkg="rqt_gui" exec="rqt_gui" respawn="false" output="screen" args="perspective-file $(find eufs_gazebo)/config/eufs_sim.perspective"/> -->
<!--   </group> -->

</launch>
