<?xml version="1.0"?>
<launch>

      <!-- roslaunch arguments -->
      <arg name="namespace" default=""/>
      <arg name="cmd_timeout" default="0.5"/>

      <!-- Vehicle pose -->
      <arg name="x" default="0"/>
      <arg name="y" default="0"/>
      <arg name="z" default="0.3"/>
      <arg name="roll" default="0.0"/>
      <arg name="pitch" default="0.0"/>
      <arg name="yaw" default="0.0"/>
      
      <!-- Who knows what this does -->
      <arg name="publish_odom_tf" default="true"/>
      <param name="publish_odom_tf" value="$(arg publish_odom_tf)"/>

      <!-- Control Method Argument -->
      <arg name="controlMethod" default="speed"/>

      <!-- Load the URDF into the ROS Parameter Server -->
      <group if="$(eval arg('controlMethod')=='speed')">

          <param command="$(find xacro)/xacro '$(find eufs_description)/robots/ads-dv.urdf.xacro' --inorder" name="robot_description"/>

          <!-- start robot_control node -->
          <include file="$(find robot_control)/launch/robot_control.launch"/>

          <!--start twist to ackermannDrive converter for robot steering plugin -->
          <node pkg="robot_control" name="twist_to_ackermannDrive" type="twist_to_ackermannDrive.py" args="twistToAckermannDrive:=eufsa_control/teleop_vel_out"/>

          <!-- start rqt robot steering module -->
          <node pkg="rqt_robot_steering" name="rqt_robot_steering" type="rqt_robot_steering"/>

      </group>
      <group if="$(eval arg('controlMethod')=='torque')">

          <param command="$(find xacro)/xacro '$(find eufs_description)/robots/ads-dv-torque.urdf.xacro' --inorder" name="robot_description"/>


          <!-- Control the steering, axle, and shock absorber joints. -->
          <node name="ackermann_controller" pkg="robot_control" type="ackermann_controller.py" output="screen">
                <param name="cmd_timeout" value="$(arg cmd_timeout)"/>

                <param name="vehicle_prefix" value=""/> <!--Namespaces really need to be cleaned up, we're not consistent and it's a mess >:( -->
                <!--<param name="vehicle_prefix" value="$(arg namespace)"/>-->
                
                <rosparam file="$(find robot_control)/config/ackermann_controller.yaml" command="load"/>
                <rosparam param="driveCommandProirities" command="load" file="$(find robot_control)/config/driveCommandPriorities.yaml"/>
          </node>

          <!--start twist to ackermannDrive converter for robot steering plugin -->
          <node pkg="robot_control" name="twist_to_driveCommand2" type="twist_to_driveCommand2.py" output="screen"/>

          <!-- start rqt robot steering module -->
          <node pkg="rqt_robot_steering" name="rqt_robot_steering" type="rqt_robot_steering"/>

      </group>

      <node name="spawn_platform" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg namespace)
              -gazebo_namespace /gazebo
              -x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

      <!-- load joint controllers -->
      <!--<node name="controller_spawner" pkg="controller_manager" type="spawner" args="$(find robot_control)/config/joint_controller.yaml"/>-->

      <!-- Only launch if robot_control odom is used -->
      <node 
        pkg="tf" 
        type="static_transform_publisher" 
        name="map_broadcaster" 
        args="$(arg x) $(arg y) 0 0 0 0 1 map odom 100" 
        unless="$(eval arg('use_robot_control_odom') == false)"
      />

      <!-- Only launch if robot_control odom is not used -->
      <group if="$(eval arg('use_robot_control_odom') == false)">
        <!-- Python script to republish ground truth -->
        <node 
          name="ground_truth_republisher"
          pkg="eufs_gazebo"
          type="ground_truth_republisher.py"
          output="screen"
        />

        <node 
          name="message_to_tf" 
          pkg="message_to_tf" 
          type="message_to_tf" 
          output="screen" 
          args="/ground_truth/state"
        />
      </group>
      

    <include file="$(find eufs_gazebo)/launch/extractor.launch">
      <arg name ="track_name" value="small_track.csv"/>
      <arg name ="view_distance" value="15"/>
    </include>


</launch>
